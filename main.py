# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnfTvx84CSkF5iPQfiZrz-sJHcjONFFu
"""

import pandas as pd
import matplotlib.pyplot as plt
from utils.configs import Configs
from network.peer import Seed, Leecher
from core.event_queue import EventQueue
from core.simulator import Simulator
import time
import random

def plot_completion_time_vs_peers(graph1_df):
    plt.figure(figsize=(5, 5))
    plt.bar(graph1_df['Total Number of Peers'], graph1_df['Completion Time (seconds)'], color='blue')
    plt.title('File Completion Time vs. Total Number of Peers')
    plt.xlabel('Total Number of Peers')
    plt.ylabel('Completion Time (seconds)')
    plt.tight_layout()
    plt.savefig('graph1_completion_time.png')
    plt.show()

def plot_active_peers_over_time(active_df):
    plt.figure(figsize=(5, 5))
    plt.plot(active_df['Time'], active_df['Active Peers'], color='green')
    plt.title('Number of Active Peers Over Time')
    plt.xlabel('Time (seconds)')
    plt.ylabel('Active Peers')
    plt.tight_layout()
    plt.savefig('graph2_active_peers.png')
    plt.show()

def plot_completion_time_vs_speed(speed_df):
    plt.figure(figsize=(5, 5))
    plt.scatter(speed_df['Average Download Speed'], speed_df['Completion Time'], color='orange', label='Download Speed')
    plt.scatter(speed_df['Average Upload Speed'], speed_df['Completion Time'], color='red', label='Upload Speed')
    plt.title('File Completion Time vs. Average Speeds')
    plt.xlabel('Speed (units per second)')
    plt.ylabel('Completion Time (seconds)')
    plt.legend()
    plt.tight_layout()
    plt.savefig('graph3_completion_time_vs_speed.png')
    plt.show()

def main():
    # Parse configs
    config = Configs('config/common.cfg', 'config/peer_info.cfg')
    print(config)

    # Create peers
    peers = {}
    total_pieces = config.file_size // config.piece_size  # Calculate total pieces

    # Create a list of all pieces
    all_pieces = set(range(total_pieces))

    for index, (peer_id, host, port) in enumerate(config.peer_info):
        if index == 0:
            p = Seed(peer_id, host, port, config)          # First peer has all pieces
        else:
            if total_pieces > 1:
                num_pieces_for_peer = random.randint(1, total_pieces // 2)        # Randomly assign up to half of the total pieces
            else:
                pieces_for_leecher = set(random.sample(all_pieces, num_pieces_for_peer))  # Randomly select pieces for this leecher
                p = Leecher(peer_id, host, port, config, pieces_for_leecher)
        peers[peer_id] = p

    # Create event queue and simulator
    event_queue = EventQueue()
    sim = Simulator(event_queue, peers)

    # Example: Schedule initial events
    for peer_id, host, port in config.peer_info:
        sim.schedule_event(0, "CONNECT_PEER", {'peer_id': peer_id, 'target_peer_id': peer_id, 'host': host, 'port': port})

    # Start the timer for file completion
    start_time = time.time()

    # Start the simulator
    sim.run()

    # Calculate completion time
    completion_time = time.time() - start_time
    print(f"File completed in {completion_time:.2f} seconds.")

    # Collect data for graphs
    results = []
    active_peers_over_time = []

    # Collect active peers over time
    for time_point in range(0, int(completion_time), 1):  # Check every second
        active_peers = sum(1 for peer in peers.values() if peer.is_active())  # Check active peers
        active_peers_over_time.append((time_point, active_peers))
        print(f"Time: {time_point}, Active Peers: {active_peers}")  # Debugging output

    # Collect results for each peer
    for peer_id, peer in peers.items():
        results.append({
            'Peer ID': peer_id,
            'Pieces Held': len(peer.pieces),
            'Uploaded Pieces': peer.uploaded_pieces,
            'Downloaded Pieces': peer.downloaded_pieces,
            'Download Speed': peer.download_speed,  # Assuming this is tracked
            'Upload Speed': sum(peer.upload_speed.values())  # Sum the upload speeds for each peer
        })

    # Create a DataFrame for all results
    df = pd.DataFrame(results)

    # File completion time as a function of the total number of peers
    graph1_data = {
        'Total Number of Peers': [len(peers)],
        'Completion Time (seconds)': [completion_time]
    }
    graph1_df = pd.DataFrame(graph1_data)
    graph1_df.to_csv('graph1_completion_time.csv', index=False)
    active_df = pd.DataFrame(active_peers_over_time, columns=['Time', 'Active Peers'])
    active_df.to_csv('graph2_active_peers.csv', index=False)

    # File completion time as a function of the average downloading/uploading speed
    avg_download_speed = sum(peer.download_speed for peer in peers.values()) / len(peers)
    total_upload_speed = 0
    for peer in peers.values():
        total_upload_speed += sum(peer.upload_speed.values())
    avg_upload_speed = total_upload_speed / len(peers) if len(peers) > 0 else 0
    speed_results = {
        'Average Download Speed': [avg_download_speed],
        'Average Upload Speed': [avg_upload_speed],
        'Completion Time': [completion_time]
    }
    speed_df = pd.DataFrame(speed_results)
    speed_df.to_csv('graph3_completion_time_vs_speed.csv', index=False)

    # Plotting the graphs
    plot_completion_time_vs_peers(graph1_df)
    plot_active_peers_over_time(active_df)
    plot_completion_time_vs_speed(speed_df)

if __name__ == "__main__":
    main()